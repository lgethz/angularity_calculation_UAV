# Grain Overlap Analysis & Angularity Calculation

## Overview
This Python code (originally written with python version 3.9.13 - it is recommended to run it in a virtual environment that uses python 3.9.13) analyzes overlapping regions between sediment grains using Digital Elevation Models (DEM) and grain segmentation data. The code loads the segmentation data, which can be obtained from the ImageGrains machine-learning algorithm used to determine clasts. It then detects where one grain overlaps another based on elevation differences. Then it calculates grain angularity while accounting for overlap regions using a modified version of Zheng's (2015) MATLAB code.

The original code by Zheng 2015 can be downloaded from here: https://ch.mathworks.com/matlabcentral/fileexchange/60651-particle-roundness-and-sphericity-computation

The code for ImageGrains can be found here: https://github.com/dmair1989/imagegrains/tree/main

This code was created with the help of CoPilot AI Claude 3.7 Sonnet Thinking.

## Author
Lars Gübeli  
Quantification of landslide sediment angularity using machine learning assisted image segmentation  
Bachelor Thesis Project  
ETH Zürich  
June 2025

------------------------------------------------------------

## Features
- Loads and processes Digital Elevation Models (DEMs)
- Processes grain segmentation data from ImageGrains
- Identifies grain boundaries using contour detection
- Analyzes potential overlap between adjacent grains
- Visualizes results with customizable parameters
- Exports results as georeferenced GeoTIFF files
- Calculates grain angularity excluding overlap regions (based on modified Zheng 2015 code)
- Creates individual grain images for further analysis
- Generates comprehensive CSV data of overlap points
- Provides visual representation of all analysis stages
- Produces detailed angularity metrics accounting for overlap
- Supports multi-resolution analysis with automatic coordinate transformation
- Calculates Pixel Count Diameter (PCD) for grain size quantification
- Filters out small grains based on minimum PCD threshold


## External Code Attribution
This project incorporates modified MATLAB code from:

**Junxing Zheng, University of Michigan, Ann Arbor (2015)**  
The angularity calculation is based on code originally developed by Junxing Zheng and R.D. Hryciw, with modifications to handle grain overlap regions.

**Citation:**  
Zheng, J., and Hryciw, R.D. (2015). "Traditional Soil Particle Sphericity, Roundness and Surface Roughness by Computational Geometry", Geotechnique, Vol. 65, No. 6, 494-506, DOI:10.1680/geot./14-P-192.

**License:**  
The original code is distributed under a BSD license. See the LICENSE.txt file in the MatlabZheng2015 directory for details.

## Dependencies
- numpy
- matplotlib
- rasterio
- scikit-image
- scipy
- matlabengine
- pandas
- seaborn
- tqdm
- skicit-learn
- MATLAB with Image Processing Toolbox and Curve Fitting Toolbox

## Installation:
1. Clone this repository
2. Install required packages from Python after creating a virtual environment (it is suggested to use Visual Studio Code):
   - Create a virtual environment in the command line (recommended, example for MacOS):
     ```
     python3.9 -m venv venv39
     source venv39/bin/activate
     ```
   - Install Python dependencies:
     ```
     pip install -r requirements.txt
     ```

3. Install MATLAB and MATLAB Engine:
   - Install MATLAB on your computer ([https://www.mathworks.com/help/install/ug/install-products-with-internet-connection.html])
   - Install MATLAB's Image Processing Toolbox and the Curve Fitting Toolbox (required for grain angularity analysis)
   - Install matlabengine for python ([https://ch.mathworks.com/help/matlab/matlab_external/python-setup-script-to-install-matlab-engine-api.html])
   - Example for MacOS (run following commands in your virtual environment in a terminal):
     ```
     # Access virtual environment
     source venv39/bin/activate
     # Install matlab engine
     cd "/Applications/MATLAB_R2024a.app/extern/engines/python" (change to your matlab version and path)
     python setup.py install
     ```


## Running the Analysis
The main script to run the complete analysis is `RunOverlapAnalysis.py`. This script:

Input Requirements
The script accepts the following input formats:

DEM Data:
1. GeoTIFF files (.tif) containing elevation data
2. Different resolutions supported through automatic coordinate transformation
3. Can process both single files or entire directories of DEMs

Grain Segmentation Data:
1. Segmentation masks as NumPy arrays (.npy)
2. GeoTIFF files (.tif) from ImageGrains or other segmentation tools
3. Each grain should have a unique integer ID (background = 0)
4. Can handle multi-scale data with automatic scaling detection

## Analysis Workflow
The script performs the following operations:

Data Loading & Preprocessing:
1. Loads DEM and segmentation data
2. Automatically detects resolution differences and scaling factors
3. Removes edge grains (optional) to avoid boundary artifacts
4. Filters out small grains based on PCD threshold (optional)
5. Creates a coordinate transformation system for multi-resolution analysis

Boundary & Overlap Detection:
1. Extracts grain boundaries using contour detection
2. Analyzes elevation profiles perpendicular to grain boundaries
3. Identifies potential overlap points based on elevation differences
4. Applies vertical cutoff optimization (VCO) parameter to control sensitivity
5. Creates overlap point database for each grain

Individual Grain Processing:
1. Extracts each grain as a separate image
2. Maps overlap points to individual grain coordinate systems
3. Prepares data structures for MATLAB angularity analysis
4. Applies exclusion zone around overlap points to prevent edge effects

MATLAB Integration:
1. Transfers grain and overlap data to MATLAB
2. Executes modified Zheng (2015) algorithm for each grain
3. Filters out convex points near overlap regions
4. Calculates angularity metrics (roundness, sphericity)
5. Returns complete analysis with diagnostic information
6. Result Compilation & Visualization:

Aggregates individual grain results
1. Generates visualization of overlap points and angularity metrics
2. Creates comprehensive CSV output of all measurements
3. Produces summary statistics and distribution analysis

------------------------------------------------------------

## Parameter Optimization Tools
The Analysis_threshold_and_range directory contains tools for optimizing the detection parameters (threshold and range_check) to improve accuracy and precision of overlap detection:

# CreateOverlapTruth.py
This interactive tool allows users to manually create ground truth data for overlap regions:

1. Loads DEM and grain segmentation data
2. Provides an interactive interface for selecting grains
3. Uses lasso selection to mark actual overlap points (ground truth)
4. Exports ground truth data to CSV for parameter optimization
5. Supports image transformations and multiple selection modes

# AnalyseParameters.py
This script analyzes different combinations of threshold and range_check parameters to determine optimal values:

1. Tests multiple parameter combinations against ground truth data
2. Calculates accuracy, precision, recall, and F1 scores using confusion matrices
3. Generates heatmaps and visualizations of performance metrics
4. Identifies the best parameter settings for different optimization goals
5. Outputs comprehensive analysis results to CSV and image files

These parameter optimization tools enable users to fine-tune the overlap detection algorithm for specific types of grain imagery and elevation data, resulting in more accurate angularity calculations.

------------------------------------------------------------

# calculatePCD.py
This utility calculates the Pixel Count Diameter (PCD) for all grains in a segmentation image:

1. Supports both `.npy` and `.tif` file formats for segmentation data
2. Finds the maximum diameter for each grain (in pixels)
3. Generates visualizations showing the diameter lines for each grain
4. Outputs comprehensive statistics (min, max, mean, median PCD)
5. Saves results to CSV for further analysis
6. Can be used to determine the value for matlab_tol